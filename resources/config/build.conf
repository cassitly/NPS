# this is a comment.

# The author of this, the organization argument is to tell if this is an organization project.
AUTHOR: [ name: author, organization: false ]

# The email is optional, but will be avaliable if the developer wants to receive an email when
# their server endpoints are unavailable. An server endpoint is not required, but is to be able
# to easily allow the plugin to receive API updates, like broadcasting UPDATES to plugin, or sending
# requests to the plugin to receive external information. Or for the plugin to send information to
# the API ENDPOINT. The server option is for the plugin to try and access the url when the plugin
# is enabled. Or optionally it can be set when an external ENDPOINT has sent a request to the plugin
# or just an function to send the request to the server.
EMAIL: [ OPTIONAL: "hotmail.com@gmail.com", SERVER: "https://api.endpoint.url" ]

# This endpoint is for the developer to set the permissions that the plugin can access to the SERVEr.
# the SERVER can also set the permissions on its ENDPOINT in case the plugin is not securely serving
# the requested permissions allowed.
ENDPOINT: [ API: "https://api.endpoint.url", REQUESTS: { read: true, write: true, receive: true, send: true} ]

# This is the plugin information, is it enabled by default (aka on startup) or its build path.
PLUGIN: [ name: Plugin, path: A:/to/your/plugin, enabled: true ]
# The version of the plugin, check for updates or not. The update endpoint.
VERSION: [ current: 1.0.0, repository: "https://repository.github.com/YOUR_PLUGIN", auto_update: true ]

# The source code project settings, vanilla settings means that NPS will use the default language's
# code, without any framework specific settings, IE NODEJS, NPM, etc.
BUILD_CONFIG: [ language: "JAVASCRIPT", vanilla: true, project: "YOUR_PLUGIN_PROJECT_PATH" ]

# The framework setting if the vanilla setting in BUILD_CONFIG is false, then install and use the
# following frameworks settings, and initialize them. If this plugin is a framework then set the
# is_framework to true. If this plugin is not a framework then leave it at the default false value.
FRAMEWORK: [ module: { nodejs: "latest", npm: "latest", initialize: true}, is_framework: false]

# The project setting, allows you to set the plugin output name, if its a executable or not.
# the debugger/executor's name for the plugin, if its an CLI runner, or an GUI_EXECUTABLE.
# if the plugin is in PRODUCTION Mode or not, does it have a custom executor / debugger or not.
PROJECT: [ OUTPUT: { source: "YOUR_PLUGIN", executable: true }, BUILDER: { debugger_source: "debug-YOUR_PLUGIN", default: CLI_EXECUTABLE }, PROD: { default: false, custom_executor: false } ]

# If you decide to use an custom debugger set the path to the debugger's source code. And if its an CLI executable or an GUI_EXECUTABLE.
# if you want to use an custom executor for the plugin, set the path to it's source code, and set if it is an CLI_EXECUTABLE, an GUI_EXECUTABLE, or an STARTUP_EXECUTABLE

# an GUI_EXECUTABLE executes an GUI upon starting the plugin, an CLI_EXECUTABLE requires the plugin to be ran in the CLI. an STARTUP_EXECUTABLE allows the plugin to
# startup automatically without setting up everything, everytime the plugin is started. The CUSTOM setting won't work if the PROJECT PRODUCTION custom executor is false.
CUSTOM: [ debugger: { debugger_path: "A:/path/to/your/custom/debugger/", default: CLI_EXECUTABLE }, executable: { path: "A:/path/to/your/custom/executor", default: GUI_EXECUTABLE } ]

# The source file's setting can be changed to run all, instead of just a path to a single file. unless you want to
# execute only one file, and set the path to the single file to run and build.
SOURCE: [ FILES: { path: "A:/path/to/your/plugin/source/", execute: all } ]